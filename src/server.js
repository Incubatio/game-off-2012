// Generated by CoffeeScript 1.4.0
(function() {
  var app, backboneio, backend, clients, cons, express, haml, io, light, server;

  express = require('express');

  app = require('express')();

  server = require('http').createServer(app);

  io = require('socket.io').listen(server);

  clients = {};

  light = false;

  backboneio = require('backbone.io');

  backend = backboneio.createBackend();

  backend.use(backboneio.middleware.memoryStore());

  backboneio.listen(io, {
    mybackend: backend
  });

  haml = require('hamljs');

  cons = require('consolidate');

  app.configure(function() {
    app.set('port', process.env.PORT || 3000);
    app.engine('haml', cons.haml);
    app.set('views', __dirname + '/views');
    app.engine('haml', cons.haml);
    app.set('view engine', 'haml');
    app.set("view options", {
      layout: false
    });
    app.use(express.logger());
    app.use(express.bodyParser());
    app.use(express.cookieParser());
    app.use(app.router);
    app.use(express.methodOverride());
    return app.use(express["static"]("" + __dirname + "/public"));
  });

  server.listen(app.get('port'));

  io.sockets.on('connection', function(socket) {
    var emit;
    emit = function() {
      var args, clientName;
      args = [];
      Array.prototype.push.apply(args, arguments);
      clientName = args.shift();
      if (clients[clientName]) {
        return clients[clientName].emit.apply(clients[clientName], args);
      }
    };
    return socket.on('register', function(name) {
      console.log('register: ', name);
      clients[name] = socket;
      socket.emit('switch light', light);
      if (name === 'game1') {
        socket.on('get adventure', function() {
          return require('fs').readFile(__dirname + "/data/text/adventure.json", "utf8", function(err, data) {
            return emit('game1', 'adventure', JSON.parse(data));
          });
        });
        socket.on('start game', function(gameName) {
          var cmd, exec, port, puts, stack, sys, uri;
          port = gameName === "game2" ? 3001 : 3002;
          stack = [];
          sys = require('sys');
          exec = require('child_process').exec;
          puts = function(error, stdout, stderr) {
            console.log(stdout);
            sys.puts(stdout);
            console.log('error:', error);
            console.log('stderr:', stderr);
            return setTimeout(function() {
              return emit('game1', 'open tab', 'http://localhost:' + port);
            }, 1000);
          };
          uri = 'https://github.com/Incubatio/game-off-2012.git';
          cmd = "if [ ! -d \"" + gameName + "\" ]; then git clone -b " + gameName + " " + uri + " " + gameName + ";fi;  node " + gameName + "/src/server.js &> var/logs/" + gameName + " < var/logs/" + gameName + " &";
          console.log(cmd);
          return exec(cmd, puts);
        });
        socket.on('reset pong', function() {
          return emit('game2', 'reset pong');
        });
        socket.on('equip hammer', function() {
          return emit('game2', 'equip hammer');
        });
        socket.on('switch light', function(light2) {
          light = light2;
          emit('game2', 'switch light', light2);
          return emit('game3', 'switch light', light2);
        });
      }
      if (name === 'game2') {
        socket.on('loose pong', function() {
          emit('game1', 'ai', 'haha, looser ...');
          return emit('game1', 'sprint', '(something just moved in you bag ... it felt like a massage)');
        });
        socket.on('win pong', function() {
          return emit('game1', 'sparse', "play 305");
        });
        socket.on('win forge', function() {
          return emit('game1', 'sparse', 'play 310');
        });
        socket.on('win oiram', function() {
          emit('game1', 'sparse', 'play 320');
          emit('game2', 'finish');
          return emit('game3', 'finish');
        });
      }
      if (name === 'game3') {
        socket.on('get scene', function(params) {
          return require('fs').readFile(__dirname + "/data/scenes/" + params.name + ".json", "utf8", function(err, data) {
            var scene;
            scene = JSON.parse(data);
            if (scene.map) {
              return require('fs').readFile(__dirname + "/data/maps/test.json", "utf8", function(err, data) {
                scene.map = JSON.parse(data);
                return emit('game3', 'scene', scene);
              });
            } else {
              return emit('game3', 'scene', scene);
            }
          });
        });
        socket.on('transfer cube', function() {
          return emit('game2', 'cube');
        });
        return socket.on('win rpg', function() {
          return emit('game1', 'sparse', 'play 330');
        });
      }
    });
  });

  app.get('/', function(req, res) {
    return res.render('index.haml');
  });

}).call(this);
